the result sent from the backend after signin in:

echo json_encode([
            "success" => true,
            "token" => $token,
            "user" => [
                "id" => $user['id'],
                "email" => $user['email'],
                "role" => $user['role']
            ]
        ]);

the frontend frontend that handles the signin reult:

const handleLogin = async () => {
    setLoading(true);
    try {
      const { data } = await axios.post("http://localhost:8000/signin.php", { email, pin });
       console.log(data)
       if (data.success && data.token) {
        localStorage.setItem("token", data.token);
        
        switch (data.user.role) {
            case "guest":
                navigate("/guest-dashboard");
                break;
            case "employee":
                navigate("/employee");
                break;
            case "housekeeper":
                navigate("/housekeeper-dashboard");
                break;
            case "manager":
                navigate("/manager-dashboard");
                break;
            default:
                navigate("/dashboard"); // Default route
        }
    } else {
        toast.error("Invalid credentials");
        console.log(data.message || "Login failed.");
    }
    
    } catch (error) {
      console.error("Login failed", error);
      toast.error("Login failed", error);
    }finally{
       setLoading(false);
    }
  };


  the private route: 

  import { useContext } from "react";
import { Navigate } from "react-router-dom";
import { AuthContext } from "../context/AuthContext";

export default function PrivateRoute({ children }) {
  const { user, loading } = useContext(AuthContext);

  if (loading) return <p>Loading...</p>;
  return user ? children : <Navigate to="/login" />;
}


my main route:
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import Login from "../pages/Login";
import Signup from "../pages/Signup";
import Home from "../pages/employee/pages/Dashboard";
import PrivateRoute from "./PrivateRoute";
import Overview from "../pages/employee/pages/Overview";
import Rooms from "../pages/employee/pages/Rooms";
import Bookings from "../pages/employee/pages/Bookings";
import ChatPage from "../pages/employee/pages/Messages";
import AddRoom from "../pages/employee/pages/AddRoom";
import ViewRoom from "../pages/employee/pages/ViewRoom";
import RoomBooking from "../pages/employee/pages/CreateBooking";
import GuestPage from "../pages/employee/pages/Guests";
import Settings from "../pages/employee/pages/Settings";
import NotFound from "../pages/NotFound"; // Import the 404 page component

export default function AppRoutes() {
  return (
    <Router>
      <Routes>
        {/* Public Routes */}
        <Route path="/login" element={<Login />} />
        <Route path="/signUp" element={<Signup />} />

        {/* Protected Routes */}
        <Route path="/employee" element={<Home />}>
          <Route index element={<Overview />} />
          <Route path="rooms" element={<Rooms />} />
          <Route path="bookings" element={<Bookings />} />
          <Route path="messages" element={<ChatPage />} />
          <Route path="guests" element={<GuestPage />} />
          <Route path="settings" element={<Settings />} />
          <Route path="messages/chat/:id" element={<ChatPage />} />
          <Route path="add-room" element={<AddRoom />} />
          <Route path="room/:id" element={<ViewRoom />} />
          <Route path="room-booking" element={<RoomBooking />} />
        </Route>

        {/* Guest Dashboard (Protected) */}
        <Route
          path="/guest-dashboard"
          element={
            <PrivateRoute>
              {/* <Home /> */}
            </PrivateRoute>
          }
        />

        {/* 404 Page */}
        <Route path="*" element={<NotFound />} />
      </Routes>
    </Router>
  );
}


my authProvider:

import { createContext, useState, useEffect } from "react";

 export const AuthContext = createContext();

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Check if user is logged in
    const token = localStorage.getItem("token");
    if (token) {
      fetch("http://localhost:8000/validate_token.php", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ token }),
      })
        .then((res) => res.json())
        .then((data) => {
          if (data.success) setUser(data.user);
        })
        .catch(() => setUser(null))
        .finally(() => setLoading(false));
    } else {
      setLoading(false);
    }
  }, []);


  // Logout function
  const logout = () => {
    localStorage.removeItem("token");
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, logout, loading }}>
      {children}
    </AuthContext.Provider>
  );
}


..............so i want if a user signins in the message sent from the backend to the frontend will be saved in the authprovider, then it will be used in the private route to make sure no user can route to a dashboard that is not for his/role. also add manageers and house keeper routes for their dashboard. make it good thank you
